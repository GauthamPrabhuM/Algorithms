// merge sort O(nlogn)
/*MERGE(A,p,q,r) 
n1=q-p+1
n2=riq
let L[1..n1+1] and R[1..n2+1] be new arrays
for i=1 to n1
L[i]=A[p+i-1]
for j=1 to n2
R[j]=A[q+j]
L[n1+1]=infinity
R[n2+1]=infinity
i=1
j=1
for k=p to r
if L[i]<=R[j]
 A[k]=L[i]
 i+=1
else A[k]=R[j]
     j+=1
     
  MERGESORT(A,p,r)
  if p<r
  q=p+r/2
  MergeSort(A,p,q)
  MergeSort(A,q+1,r)
  Merge(A,p,q,r)
 p-> lb q -> mid r-> end 
*/

/*
#include <iostream>
using namespace std;
 void Merge(int *a, int low, int high, int mid)
{
	// We have low to mid and mid+1 to high already sorted.
	int i, j, k, temp[high-low+1];
	i = low;
	k = 0;
	j = mid + 1;
	// Merge the two parts into temp[].
	while (i <= mid && j <= high)
	{
		if (a[i] < a[j])
		{
			temp[k] = a[i];
			k++;
			i++;
		}
		else
		{
			temp[k] = a[j];
			k++;
			j++;
		}
	}
 	// Insert all the remaining values from i to mid into temp[].
	while (i <= mid)
	{
		temp[k] = a[i];
		k++;
		i++;
	}
	// Insert all the remaining values from j to high into temp[].
	while (j <= high)
	{
		temp[k] = a[j];
		k++;
		j++;
	}
 
	// Assign sorted data stored in temp[] to a[].
	for (i = low; i <= high; i++)
	{
		a[i] = temp[i-low];
	}
}
 
// A function to split array into two parts.
void MergeSort(int *a, int low, int high)
{
	int mid;
	if (low < high)
	{
		mid=(low+high)/2;
		// Split the data into two half.
		MergeSort(a, low, mid);
		MergeSort(a, mid+1, high);
		// Merge them to get sorted output.
		Merge(a, low, high, mid);
	}
}
 
int main()
{
	int n, i;
	cin>>n;
	int arr[n];
	for(i = 0; i < n; i++)
		cin>>arr[i];

	MergeSort(arr, 0, n-1);

	for (i = 0; i < n; i++)
        cout<<"->"<<arr[i];
 
	return 0;
}
